from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

async def settings(message: types.Message, state: FSMContext):
    await delete_last_settings_message(message.chat.id, state)
    data = await state.get_data()
    city = data.get('location_city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    notifications = data.get('notifications', '–û—Ç–∫–ª—é—á–µ–Ω–∞')

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", callback_data="send_location")],
        [InlineKeyboardButton(text=f"{'–û—Ç–∫–ª—é—á–∏—Ç—å' if notifications == '–í–∫–ª—é—á–µ–Ω–∞' else '–í–∫–ª—é—á–∏—Ç—å'} —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    sent_message = await message.answer(f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥: {city}\n–†–∞—Å—Å—ã–ª–∫–∞: {notifications}", reply_markup=kb)
    await state.update_data(last_settings_message_id=sent_message.message_id)

async def handle_settings_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_settings_message(callback_query.message.chat.id, state)
    if callback_query.data == "change_city":
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    elif callback_query.data == "send_location":
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
            ],
            resize_keyboard=True
        )
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.", reply_markup=kb)
    elif callback_query.data == "toggle_notifications":
        data = await state.get_data()
        notifications = data.get('notifications', '–û—Ç–∫–ª—é—á–µ–Ω–∞')
        new_status = '–í–∫–ª—é—á–µ–Ω–∞' if notifications == '–û—Ç–∫–ª—é—á–µ–Ω–∞' else '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        await state.update_data(notifications=new_status)
        await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {new_status.lower()}–∞.")
        await settings(callback_query.message, state)
    elif callback_query.data == "back_to_menu":
        await show_main_menu(callback_query.message, state)

async def delete_last_settings_message(chat_id: int, state: FSMContext):
    data = await state.get_data()
    last_settings_message_id = data.get('last_settings_message_id')
    if last_settings_message_id:
        await bot.delete_message(chat_id, last_settings_message_id)
        await state.update_data(last_settings_message_id=None)

def register_settings_handlers(dp):
    dp.callback_query.register(handle_settings_buttons, lambda callback_query: callback_query.data in ["change_city", "send_location", "back_to_menu", "toggle_notifications"])