import aiohttp
import logging
from datetime import datetime
from rpc.config import WEATHER_API_KEY

# –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
months = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
    7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def format_date(date):
    return f"{date.day} {months[date.month]}"

async def get_weather(city: str, days: int):
    if days == 1:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        url_forecast = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    else:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        url_forecast = None
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if days == 1 and url_forecast:
                        async with session.get(url_forecast) as response_forecast:
                            if response_forecast.status == 200:
                                data_forecast = await response_forecast.json()
                                return format_weather_today(data, data_forecast)
                            else:
                                logging.error(f"Error from OpenWeather API (forecast): {response_forecast.status}")
                                return None
                    else:
                        return format_weather_three_days(data)
                else:
                    logging.error(f"Error from OpenWeather API: {response.status}")
                    return None
        except Exception as e:
            logging.error(f"Exception occurred while fetching weather: {e}")
            return None

def format_weather_today(data, forecast_data):
    current_temp = round(data['main']['temp'])
    temp_max = round(data['main']['temp_max'])
    temp_min = round(data['main']['temp_min'])
    description = data['weather'][0]['description'].capitalize()
    wind_speed = data['wind']['speed']
    wind_direction = get_wind_direction(data['wind']['deg'])
    humidity = data['main']['humidity']
    pressure = round(data['main']['pressure'] * 0.750062)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–ü–∞ –≤ –º–º —Ä—Ç. —Å—Ç.
    sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
    sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')

    # –§–∞–∑–∞ –õ—É–Ω—ã (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
    moon_phase = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É—Ç—Ä–æ, –¥–µ–Ω—å –∏ –≤–µ—á–µ—Ä
    morning_temp, afternoon_temp, evening_temp = get_forecast_temps(forecast_data)

    icon_mapping = {
        '01d': '‚òÄÔ∏è', '01n': 'üåï',
        '02d': '‚õÖ', '02n': '‚õÖ',
        '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
        '09d': 'üåß', '09n': 'üåß',
        '10d': 'üå¶', '10n': 'üå¶',
        '11d': '‚õà', '11n': '‚õà',
        '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
        '50d': 'üå´', '50n': 'üå´'
    }
    weather_icon = icon_mapping.get(data['weather'][0]['icon'], 'üå§')

    weather_message = (
        f"–°–µ–≥–æ–¥–Ω—è, {format_date(datetime.now())}\n"
        f"{weather_icon} +{temp_max}¬∞...+{temp_min}¬∞, {description}\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {data.get('pop', 0)*100}%\n\n"
        f"–°–µ–π—á–∞—Å: {weather_icon} +{current_temp}¬∞, ‚ÜôÔ∏è {wind_speed} –º/—Å\n\n"
        f"–£—Ç—Ä–æ–º: ‚òÅÔ∏è +{morning_temp}¬∞\n"
        f"–î–Ω–µ–º: ‚òÄÔ∏è +{afternoon_temp}¬∞\n"
        f"–í–µ—á–µ—Ä–æ–º: ‚òÄÔ∏è +{evening_temp}¬∞\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"–í–µ—Ç–µ—Ä: {wind_direction}, {wind_speed} –º/—Å\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n\n"
        f"–õ—É–Ω–∞: {moon_phase}\n"
        f"–í–æ—Å—Ö–æ–¥: {sunrise}\n"
        f"–ó–∞–∫–∞—Ç: {sunset}\n"
    )

    return weather_message

def get_wind_direction(degree):
    directions = ['–°–µ–≤–µ—Ä–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–∂–Ω—ã–π', '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π', '–ó–∞–ø–∞–¥–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π']
    ix = round(degree / (360. / len(directions)))
    return directions[ix % len(directions)]

def get_forecast_temps(forecast_data):
    morning_temp = None
    afternoon_temp = None
    evening_temp = None

    for forecast in forecast_data['list']:
        forecast_time = datetime.fromtimestamp(forecast['dt']).hour
        temp = round(forecast['main']['temp'])

        if 6 <= forecast_time < 12 and morning_temp is None:
            morning_temp = temp
        elif 12 <= forecast_time < 18 and afternoon_temp is None:
            afternoon_temp = temp
        elif 18 <= forecast_time < 24 and evening_temp is None:
            evening_temp = temp

    return morning_temp, afternoon_temp, evening_temp

def format_weather_three_days(data):
    return format_weather_general(data, 3)

def format_weather_general(data, days):
    if days == 1:
        forecasts = [data]
    else:
        forecasts = data['list'][:days*8:8]  # –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞, –±–µ—Ä–µ–º 8 –∑–∞–ø–∏—Å–µ–π –¥–ª—è 3 –¥–Ω–µ–π

    weather_message = ""
    for i, forecast in enumerate(forecasts):
        date = datetime.fromtimestamp(forecast['dt']).strftime('%d %B')
        temp_max = round(forecast['main']['temp_max'])
        temp_min = round(forecast['main']['temp_min'])
        description = forecast['weather'][0]['description'].capitalize()
        icon = forecast['weather'][0]['icon']

        day_mapping = {0: '–°–µ–≥–æ–¥–Ω—è', 1: '–ó–∞–≤—Ç—Ä–∞', 2: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'}
        day_name = day_mapping.get(i, date)

        icon_mapping = {
            '01d': '‚òÄÔ∏è', '01n': 'üåï',
            '02d': '‚õÖ', '02n': '‚õÖ',
            '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
            '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
            '09d': 'üåß', '09n': 'üåß',
            '10d': 'üå¶', '10n': 'üå¶',
            '11d': '‚õà', '11n': '‚õà',
            '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
            '50d': 'üå´', '50n': 'üå´'
        }
        weather_icon = icon_mapping.get(icon, 'üå§')

        weather_message += (f"{day_name}, {format_date(datetime.fromtimestamp(forecast['dt']))}\n"
                            f"{weather_icon} +{temp_max}¬∞...+{temp_min}¬∞, {description}\n"
                            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {forecast.get('pop', 0)*100}%\n\n")

    return weather_message