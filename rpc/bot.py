from aiogram import types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from services.location import get_city_by_location

async def cmd_start(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="forecast_today")],
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast_three_days")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    sent_message = await message.answer("–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kb)
    await state.update_data(main_menu_message_id=sent_message.message_id, last_forecast_message_id=None, notifications='–û—Ç–∫–ª—é—á–µ–Ω–∞')

async def handle_location(message: types.Message, state: FSMContext):
    location = message.location
    city = await get_city_by_location(location.latitude, location.longitude)
    if city:
        await state.update_data(location_city=city, user_id=message.from_user.id)
        await message.answer(f"–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {city}")
        await show_main_menu(message, state)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")

def register_main_menu_handlers(dp):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_location, lambda message: message.location is not None)