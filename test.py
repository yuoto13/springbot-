import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from geopy.geocoders import Nominatim
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, timezone
import test_config

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=test_config.BOT_TOKEN)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(storage=MemoryStorage())

# –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
months = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è',
    7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def format_date(date):
    return f"{date.day} {months[date.month]}"

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.", reply_markup=kb)
    await state.update_data(main_menu_message_id=None, last_forecast_message_id=None, notifications='–û—Ç–∫–ª—é—á–µ–Ω–∞')

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
@dp.message(lambda message: message.location is not None)
async def handle_location(message: types.Message, state: FSMContext):
    geolocator = Nominatim(user_agent="weather_bot")
    location = message.location
    try:
        location_info = geolocator.reverse((location.latitude, location.longitude), language="ru")
        city = location_info.raw['address'].get('city', location_info.raw['address'].get('town', ''))
        if city:
            await state.update_data(location_city=city, user_id=message.from_user.id)
            await message.answer(f"–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {city}")
            await show_main_menu(message, state)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.error(f"Exception occurred while fetching location: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")

async def show_main_menu(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="forecast_today")],
        [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast_three_days")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])
    sent_message = await message.answer("–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kb)
    await state.update_data(main_menu_message_id=sent_message.message_id)

# –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda callback_query: callback_query.data in ["forecast_today", "forecast_three_days", "settings"])
async def handle_forecast_and_settings_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_main_menu(callback_query.message.chat.id, state)
    if callback_query.data == "forecast_today":
        await forecast_today(callback_query.message, state)
    elif callback_query.data == "forecast_three_days":
        await forecast_three_days(callback_query.message, state)
    elif callback_query.data == "settings":
        await settings(callback_query.message, state)

async def delete_main_menu(chat_id: int, state: FSMContext):
    data = await state.get_data()
    main_menu_message_id = data.get('main_menu_message_id')
    if main_menu_message_id:
        await bot.delete_message(chat_id, main_menu_message_id)
        await state.update_data(main_menu_message_id=None)

async def delete_last_forecast(chat_id: int, state: FSMContext):
    data = await state.get_data()
    last_forecast_message_id = data.get('last_forecast_message_id')
    if last_forecast_message_id:
        await bot.delete_message(chat_id, last_forecast_message_id)
        await state.update_data(last_forecast_message_id=None)

async def delete_last_settings_message(chat_id: int, state: FSMContext):
    data = await state.get_data()
    last_settings_message_id = data.get('last_settings_message_id')
    if last_settings_message_id:
        await bot.delete_message(chat_id, last_settings_message_id)
        await state.update_data(last_settings_message_id=None)

async def forecast_today(message: types.Message, state: FSMContext):
    await delete_last_forecast(message.chat.id, state)
    data = await state.get_data()
    city = data.get('location_city')
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")
        await show_main_menu(message, state)
        return
    
    weather = await get_weather(city, 1)
    if weather:
        sent_message = await message.answer(weather)
        await state.update_data(last_forecast_message_id=sent_message.message_id)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await show_main_menu(message, state)

async def forecast_three_days(message: types.Message, state: FSMContext):
    await delete_last_forecast(message.chat.id, state)
    data = await state.get_data()
    city = data.get('location_city')
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")
        await show_main_menu(message, state)
        return
    
    weather = await get_weather(city, 3)
    if weather:
        sent_message = await message.answer(weather)
        await state.update_data(last_forecast_message_id=sent_message.message_id)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await show_main_menu(message, state)

async def settings(message: types.Message, state: FSMContext):
    await delete_last_settings_message(message.chat.id, state)
    data = await state.get_data()
    city = data.get('location_city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    notifications = data.get('notifications', '–û—Ç–∫–ª—é—á–µ–Ω–∞')

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", callback_data="send_location")],
        [InlineKeyboardButton(text=f"{'–û—Ç–∫–ª—é—á–∏—Ç—å' if notifications == '–í–∫–ª—é—á–µ–Ω–∞' else '–í–∫–ª—é—á–∏—Ç—å'} —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="toggle_notifications")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    sent_message = await message.answer(f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥: {city}\n–†–∞—Å—Å—ã–ª–∫–∞: {notifications}", reply_markup=kb)
    await state.update_data(last_settings_message_id=sent_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(lambda callback_query: callback_query.data in ["change_city", "send_location", "back_to_menu", "toggle_notifications"])
async def handle_settings_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await delete_last_settings_message(callback_query.message.chat.id, state)
    if callback_query.data == "change_city":
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    elif callback_query.data == "send_location":
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
            ],
            resize_keyboard=True
        )
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.", reply_markup=kb)
    elif callback_query.data == "toggle_notifications":
        data = await state.get_data()
        notifications = data.get('notifications', '–û—Ç–∫–ª—é—á–µ–Ω–∞')
        new_status = '–í–∫–ª—é—á–µ–Ω–∞' if notifications == '–û—Ç–∫–ª—é—á–µ–Ω–∞' else '–û—Ç–∫–ª—é—á–µ–Ω–∞'
        await state.update_data(notifications=new_status)
        await callback_query.message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {new_status.lower()}–∞.")
        await settings(callback_query.message, state)
    elif callback_query.data == "back_to_menu":
        await show_main_menu(callback_query.message, state)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message(lambda message: message.text is not None)
async def handle_city_change(message: types.Message, state: FSMContext):
    await delete_last_settings_message(message.chat.id, state)
    city = message.text
    user_id = message.from_user.id
    await state.update_data(location_city=city, user_id=user_id)
    await message.answer(f"–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {city}.")
    await show_main_menu(message, state)

async def get_weather(city: str, days: int):
    if days == 1:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={test_config.WEATHER_API_KEY}&units=metric&lang=ru"
        url_forecast = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={test_config.WEATHER_API_KEY}&units=metric&lang=ru"
    else:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={test_config.WEATHER_API_KEY}&units=metric&lang=ru"
        url_forecast = None
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if days == 1 and url_forecast:
                        async with session.get(url_forecast) as response_forecast:
                            if response_forecast.status == 200:
                                data_forecast = await response_forecast.json()
                                return format_weather_today(data, data_forecast)
                            else:
                                logging.error(f"Error from OpenWeather API (forecast): {response_forecast.status}")
                                return None
                    else:
                        return format_weather_three_days(data)
                else:
                    logging.error(f"Error from OpenWeather API: {response.status}")
                    return None
        except Exception as e:
            logging.error(f"Exception occurred while fetching weather: {e}")
            return None

def format_weather_today(data, forecast_data):
    current_temp = round(data['main']['temp'])
    temp_max = round(data['main']['temp_max'])
    temp_min = round(data['main']['temp_min'])
    description = data['weather'][0]['description'].capitalize()
    wind_speed = data['wind']['speed']
    wind_direction = get_wind_direction(data['wind']['deg'])
    humidity = data['main']['humidity']
    pressure = round(data['main']['pressure'] * 0.750062)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–ü–∞ –≤ –º–º —Ä—Ç. —Å—Ç.
    sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
    sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')

    # –§–∞–∑–∞ –õ—É–Ω—ã (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)
    moon_phase = "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É—Ç—Ä–æ, –¥–µ–Ω—å –∏ –≤–µ—á–µ—Ä
    morning_temp, afternoon_temp, evening_temp = get_forecast_temps(forecast_data)

    icon_mapping = {
        '01d': '‚òÄÔ∏è', '01n': 'üåï',
        '02d': '‚õÖ', '02n': '‚õÖ',
        '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
        '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
        '09d': 'üåß', '09n': 'üåß',
        '10d': 'üå¶', '10n': 'üå¶',
        '11d': '‚õà', '11n': '‚õà',
        '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
        '50d': 'üå´', '50n': 'üå´'
    }
    weather_icon = icon_mapping.get(data['weather'][0]['icon'], 'üå§')

    weather_message = (
        f"–°–µ–≥–æ–¥–Ω—è, {format_date(datetime.now())}\n"
        f"{weather_icon} +{temp_max}¬∞...+{temp_min}¬∞, {description}\n"
        f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {data.get('pop', 0)*100}%\n\n"
        f"–°–µ–π—á–∞—Å: {weather_icon} +{current_temp}¬∞, ‚ÜôÔ∏è {wind_speed} –º/—Å\n\n"
        f"–£—Ç—Ä–æ–º: ‚òÅÔ∏è +{morning_temp}¬∞\n"
        f"–î–Ω–µ–º: ‚òÄÔ∏è +{afternoon_temp}¬∞\n"
        f"–í–µ—á–µ—Ä–æ–º: ‚òÄÔ∏è +{evening_temp}¬∞\n"
        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"–í–µ—Ç–µ—Ä: {wind_direction}, {wind_speed} –º/—Å\n"
        f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n\n"
        f"–õ—É–Ω–∞: {moon_phase}\n"
        f"–í–æ—Å—Ö–æ–¥: {sunrise}\n"
        f"–ó–∞–∫–∞—Ç: {sunset}\n"
    )

    return weather_message

def get_wind_direction(degree):
    directions = ['–°–µ–≤–µ—Ä–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π', '–Æ–∂–Ω—ã–π', '–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω—ã–π', '–ó–∞–ø–∞–¥–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π']
    ix = round(degree / (360. / len(directions)))
    return directions[ix % len(directions)]

def get_forecast_temps(forecast_data):
    morning_temp = None
    afternoon_temp = None
    evening_temp = None

    for forecast in forecast_data['list']:
        forecast_time = datetime.fromtimestamp(forecast['dt']).hour
        temp = round(forecast['main']['temp'])

        if 6 <= forecast_time < 12 and morning_temp is None:
            morning_temp = temp
        elif 12 <= forecast_time < 18 and afternoon_temp is None:
            afternoon_temp = temp
        elif 18 <= forecast_time < 24 and evening_temp is None:
            evening_temp = temp

    return morning_temp, afternoon_temp, evening_temp

def format_weather_three_days(data):
    return format_weather_general(data, 3)

def format_weather_general(data, days):
    if days == 1:
        forecasts = [data]
    else:
        forecasts = data['list'][:days*8:8]  # –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞, –±–µ—Ä–µ–º 8 –∑–∞–ø–∏—Å–µ–π –¥–ª—è 3 –¥–Ω–µ–π

    weather_message = ""
    for i, forecast in enumerate(forecasts):
        date = datetime.fromtimestamp(forecast['dt']).strftime('%d %B')
        temp_max = round(forecast['main']['temp_max'])
        temp_min = round(forecast['main']['temp_min'])
        description = forecast['weather'][0]['description'].capitalize()
        icon = forecast['weather'][0]['icon']

        day_mapping = {0: '–°–µ–≥–æ–¥–Ω—è', 1: '–ó–∞–≤—Ç—Ä–∞', 2: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'}
        day_name = day_mapping.get(i, date)

        icon_mapping = {
            '01d': '‚òÄÔ∏è', '01n': 'üåï',
            '02d': '‚õÖ', '02n': '‚õÖ',
            '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',
            '04d': '‚òÅÔ∏è', '04n': '‚òÅÔ∏è',
            '09d': 'üåß', '09n': 'üåß',
            '10d': 'üå¶', '10n': 'üå¶',
            '11d': '‚õà', '11n': '‚õà',
            '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',
            '50d': 'üå´', '50n': 'üå´'
        }
        weather_icon = icon_mapping.get(icon, 'üå§')

        weather_message += (f"{day_name}, {format_date(datetime.fromtimestamp(forecast['dt']))}\n"
                            f"{weather_icon} +{temp_max}¬∞...+{temp_min}¬∞, {description}\n"
                            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {forecast.get('pop', 0)*100}%\n\n")

    return weather_message

async def weather_updates():
    while True:
        await check_weather_updates()
        await asyncio.sleep(4 * 3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞

async def check_weather_updates():
    data = await dp.storage.get_data()
    for chat_id, user_data in data.items():
        city = user_data.get('location_city')
        notifications = user_data.get('notifications', '–û—Ç–∫–ª—é—á–µ–Ω–∞')
        if city and notifications == '–í–∫–ª—é—á–µ–Ω–∞':
            weather_update = await get_weather(city, 1)
            if weather_update:
                await bot.send_message(chat_id, weather_update)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    asyncio.create_task(weather_updates())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
